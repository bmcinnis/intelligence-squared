require(xlsx);
options(java.parameters = "-Xmx1024m")
require(XLConnect)
rm(lf);
}else{
load(lf[1]);
rm(lf);
}
## Using XLSX read the I2US results to memory as a dataframe (14 variables, 21 obs.)
if (exists("dr",where=i2us)==FALSE){
dr<-read.xlsx(
file='debateData (2014-02-22).xlsx',
sheetName='Results'
);
assign("dr", dr, envir = i2us);
## Save the i2us environment to the working directory
save(i2us, file = "i2us.RData");
rm(dr);
}
if (exists("dd",where=i2us)==FALSE){
## Using XLSX read the I2US data to memory as a dataframe (73 variables, 6,024 obs.)
#  This takes a while because the statement strings are very long.
dd<-read.xlsx(
file='debateData (2014-02-22).xlsx',
#              sheetName='DDwoStatement'
sheetName='DebateData'
);
assign("dd", dd, envir = i2us);
## Save the i2us environment to the working directory
save(i2us, file = "i2us.RData");
rm(dd);
}
## At this point the i2us environment is loaded, whether by opening
#  the XLSX files and reading them in, or merely reopening the environment
#  from the working directory.  Now, perform some quick checks on the
#  data before producing the LIWC percentages and a ggplot to display them
#  by debate and speaker turn.
attach(i2us);
## Explore the dataset a little bit:
# (1) What are the polling results?
poll<-grep(pattern='^poll.*$',
x=names(dr),
ignore.case = TRUE,
perl = TRUE,
value = TRUE);
dr$outcome[(dr$poll.delta.against>dr$poll.delta.for)]<-"against";
dr$outcome[(dr$poll.delta.against<dr$poll.delta.for)]<-"for";
dr$outcome[(dr$outcome==NA)]<-"Tie";
m.dr<-melt(dr,id.vars=c("title","outcome"),measure.vars=poll);
m.dr[,"stage"]<-sub(pattern="(.*)[.]([^.]+)[.]([^.]+)$",
x=m.dr$variable,
replacement="\\2",
perl=TRUE);
m.dr[,"side"]<-sub(pattern="(.*)[.]([^.]+)[.](for|against|undecided)$",
x=m.dr$variable,
replacement="\\3",
perl=TRUE);
m.dr<-cast(m.dr, title+side+outcome~stage);
m.dr$outcome[(m.dr$outcome==m.dr$side)]<-"win"
m.dr$outcome[(m.dr$outcome!="win")]<-"lose"
p <- ggplot(data=m.dr,
aes(x=side,
y=delta))+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
m.dr$outcome[(m.dr$side=="undecided")]<-"none"
p <- ggplot(data=m.dr,
aes(x=side,
y=delta))+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
p <- ggplot(data=m.dr,
aes(x=side,
y=before))+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
p <- ggplot(data=m.dr,
aes(x=side,
y=after))+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
p <- ggplot(data=m.dr,
aes(x=side,
y=delta))+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
p <- ggplot(data=m.dr,
aes(x=side,
y=delta))+
labs(title = "I2US:  Polling Delta", x = "By audience votes per side", y = "Difference (%after - %before)")+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
xtabs(data=m.dr,
formula=delta~side+outcome)
xtabs(data=m.dr,
formula=delta~outcome)
xtabs(data=m.dr,
formula=delta~outcome,FUN=mean)
xtabs(data=m.dr,
formula=delta~outcome)
xtabs(data=m.dr,
formula=mean(delta)~outcome)
summaryBy(data=m.dr, formula=delta~outcome)
View(m.dr)
View(dr)
summaryBy(data=m.dr,
formula=before~side+outcome)
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(mean,var,sd))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(mean,skewness,sd))
install.packages("moments")
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(mean,skewness,sd))
library(moments)
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(mean,skewness,sd))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(mean,skewness,sd,min,max))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(skewness,sd,min,mean,max))
summaryBy(data=m.dr,
formula=before~,
FUN=c(min,mean,max,skewness,sd))
summaryBy(data=m.dr,
formula=before,
FUN=c(min,mean,max,skewness,sd))
summary(data=m.dr$before,
FUN=c(min,mean,max,skewness,sd))
summary(m.dr$before,
FUN=c(min,mean,max,skewness,sd))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(min,mean,max,sd,skewness,agostino.test))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(min,mean,max,sd,skewness,agostino.test))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(min,mean,max,sd,skewness))
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(min,mean,max,sd,skewness))
summary(mr.dr$before);
summary(m.dr$before);
summary(m.dr$delta);
summary(m.dr$after);
summaryBy(data=m.dr,
formula=after~side+outcome,
FUN=c(min,mean,max,sd,skewness))
summary(m.dr$delta);
summaryBy(data=m.dr,
formula=delta~side+outcome,
FUN=c(min,mean,max,sd,skewness))
dr$outcome.delta[(dr$poll.delta.against>dr$poll.delta.for)]<-"against";
dr$outcome.delta[(dr$poll.delta.against<dr$poll.delta.for)]<-"for";
dr$outcome.delta[(dr$outcome.delta==NA)]<-"Tie";
dr$outcome.before[(dr$poll.before.against>dr$poll.before.for)]<-"against";
dr$outcome.before[(dr$poll.before.against<dr$poll.before.for)]<-"for";
dr$outcome.before[(dr$outcome.before==NA)]<-"Tie";
dr$outcome.after[(dr$poll.after.against>dr$poll.after.for)]<-"against";
dr$outcome.after[(dr$poll.after.against<dr$poll.after.for)]<-"for";
dr$outcome.after[(dr$outcome.after==NA)]<-"Tie";
summary(dr$outcome.before);
View(m.dr)
View(dr)
dr$rel.delta.against<-(dr$poll.after.against-dr$poll.before.against)/dr$poll.before.against;
summary(dr$rel.delta.agaisnt)
summary(dr$rel.delta.against)
View(m.dr)
m.dr$relative<-((m.dr$after-m.dr$before)/m.dr$before)*100;
View(m.dr)
xtabs(data=m.dr, outcome~relative)
m.dr$relative<-((m.dr$after-m.dr$before)/m.dr$before);
summaryBy(data=m.dr,
formula=before~side+relative,
FUN=c(min,mean,max,sd,skewness))
summaryBy(data=m.dr,
formula=relative~side+outcome,
FUN=c(min,mean,max,sd,skewness))
View(dd)
liwc<-grep(pattern='^liwcScores[.](?!total).*$',
x=names(dd),
ignore.case = TRUE,
perl = TRUE,
value = TRUE);
m.dd<-melt(data=dd,
id.vars=c("title"),
measure.vars=liwc)
View(m.dd)
names(dd)
m.dd<-melt(data=dd,
id.vars=c("title","role"),
measure.vars=liwc)
View(m.dd)
xtabs(m.dd,
value~title+role)
xtabs(data=m.dd,formula=value~title+role)
xtabs(data=m.dd,
formula=value~title+variable+role,
)
liwc<-c("liwcScores.Posemo","liwcScores.Negate");
m.dd<-melt(data=dd,
id.vars=c("title","role"),
measure.vars=liwc)
xtabs(data=m.dd,
formula=value~title+variable+role,
)
liwc<-c("liwcScores.Posemo","liwcScores.Negate");
m.dd<-melt(data=dd,
id.vars=c("title","role"),
measure.vars=liwc)
View(m.dd)
View(m.dd)
m.dd.agg<-aggregate(data=m.dd,formula=value~title+role+liwc)
m.dd.agg<-aggregate(m.dd,formula=value~title+role+liwc)
m.dd.agg<-aggregate(m.dd,formula=value~title+role+liwc,FUN=mean)
m.dd.agg<-aggregate(data=m.dd,formula=value~title+role+liwc,FUN=mean)
m.dd.agg<-aggregate(formula=value~title+role+liwc,data=m.dd,FUN=mean)
m.dd.agg<-aggregate(formula=value~title+role+variable,data=m.dd,FUN=mean)
View(m.dd.agg)
View(m.dd.agg)
m.dd[,"side"]<-m.dd[,"role"];
m.dd.agg<-aggregate(formula=value~title+side+variable,data=m.dd,FUN=mean)
m.d<-merge(x=m.dr,
y=m.dd.agg,
by=c("title","side"))
View(m.d)
m.dd.agg<-cast(m.dd.agg,title+side~variable);
View(m.dd.agg)
m.d<-merge(x=m.dr,
y=m.dd.agg,
by=c("title","side"))
View(m.d)
cor(x=m.d$liwcScores.Posemo,
y=m.d$delta);
cor(x=c(m.d$liwcScores.Posemo,m.d$liwcScores.Negate),
y=m.d$delta);
cor(x=c(m.d$liwcScores.Negate),
y=m.d$delta);
cor(x=c(m.d[(m.d$outcome=='win'),]$liwcScores.Negate),
y=m.d[(m.d$outcome=='win'),]$delta);
cor(x=c(m.d[(m.d$outcome=='lose'),]$liwcScores.Negate),
y=m.d[(m.d$outcome=='lose'),]$delta);
cor(x=c(m.d[(m.d$outcome=='win'),]$liwcScores.Posemo),
y=m.d[(m.d$outcome=='win'),]$delta);
cor(x=c(m.d[(m.d$outcome=='lose'),]$liwcScores.Posemo),
y=m.d[(m.d$outcome=='lose'),]$delta);
## Intelligence Squared US (I2US)
## 2014-02-25 Brian McInnis (Last update: 2014-04-04)
## Objective:  Depict turntaking during debate section (R3)
#  by LIWC function word categories (as percent of statement words)
#  also showing Opening Statement and Closing Statements as
#  baseline.
## Clear memory
#  Quite likely you will need to run this program twice,
#  Clearing the memory each time to build both the DR and DD
#  Objects.  This is mainly because the full text is included.
rm(list = ls());
## Install and load any necessary packages
pack <- c('plyr','moments','doBy','xlsx','XLConnect','ggplot2','data.table','reshape','tm', 'topicmodels');
for (p in pack) {
print(p);
if(p %in% rownames(installed.packages()) == FALSE){
install.packages(p);
}
if(p %in% rownames(installed.packages()) == TRUE){
require(p,character.only=TRUE);
}
}
rm(p,pack);
## Create the I2US Environment
setwd('/Users/bjm277/code/intelligence-squared/')
lf<-list.files(pattern = '^i2us[.]rda[ta]*$',
ignore.case = TRUE);
if (length(lf)==0) {
i2us <- new.env();
## Load XLSX libraries
require(xlsx);
options(java.parameters = "-Xmx1024m")
require(XLConnect)
rm(lf);
}else{
load(lf[1]);
rm(lf);
}
## Using XLSX read the I2US results to memory as a dataframe (14 variables, 21 obs.)
if (exists("dr",where=i2us)==FALSE){
dr<-read.xlsx(
file='debateData (2014-02-22).xlsx',
sheetName='Results'
);
assign("dr", dr, envir = i2us);
## Save the i2us environment to the working directory
save(i2us, file = "i2us.RData");
rm(dr);
}
if (exists("dd",where=i2us)==FALSE){
## Using XLSX read the I2US data to memory as a dataframe (73 variables, 6,024 obs.)
#  This takes a while because the statement strings are very long.
dd<-read.xlsx(
file='debateData (2014-02-22).xlsx',
#              sheetName='DDwoStatement'
sheetName='DebateData'
);
assign("dd", dd, envir = i2us);
## Save the i2us environment to the working directory
save(i2us, file = "i2us.RData");
rm(dd);
}
## At this point the i2us environment is loaded, whether by opening
#  the XLSX files and reading them in, or merely reopening the environment
#  from the working directory.  Now, perform some quick checks on the
#  data before producing the LIWC percentages and a ggplot to display them
#  by debate and speaker turn.
attach(i2us);
## Explore the dataset a little bit:
# (1) What are the polling results?
#     [1.a] Select polling data and reshape after creating outcome variable.
#           The winner of the debate changes the most minds, as opposed to
#           recieves the most votes.
poll<-grep(pattern='^poll.*$',
x=names(dr),
ignore.case = TRUE,
perl = TRUE,
value = TRUE);
dr$outcome[(dr$poll.delta.against>dr$poll.delta.for)]<-"against";
dr$outcome[(dr$poll.delta.against<dr$poll.delta.for)]<-"for";
dr$outcome[(dr$outcome==NA)]<-"Tie";
#     [1.b] Reshape polling data so that side/outcome are equal to
#           stage (e.g., before, after, delta) specific variables
m.dr<-melt(dr,id.vars=c("title","outcome"),measure.vars=poll);
m.dr[,"stage"]<-sub(pattern="(.*)[.]([^.]+)[.]([^.]+)$",
x=m.dr$variable,
replacement="\\2",
perl=TRUE);
m.dr[,"side"]<-sub(pattern="(.*)[.]([^.]+)[.](for|against|undecided)$",
x=m.dr$variable,
replacement="\\3",
perl=TRUE);
m.dr<-cast(m.dr, title+side+outcome~stage);
#     [1.c] Associate the prior outcome variable with side variables
m.dr$outcome[(m.dr$outcome==m.dr$side)]<-"win"
m.dr$outcome[(m.dr$outcome!="win")]<-"lose"
m.dr$outcome[(m.dr$side=="undecided")]<-"none"
#     [1.d] Plot the before debate statistics
p <- ggplot(data=m.dr,
aes(x=side,
y=before))+
labs(title = "I2US:  Polling Before Debate", x = "By audience votes per side", y = "Percentage (%)")+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
summary(m.dr$before);
summaryBy(data=m.dr,
formula=before~side+outcome,
FUN=c(min,mean,max,sd,skewness))
#     [1.e] Plot the after debate statistics
p <- ggplot(data=m.dr,
aes(x=side,
y=after))+
labs(title = "I2US:  Polling After Debate", x = "By audience votes per side", y = "Percentage (%)")+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
summary(m.dr$after);
summaryBy(data=m.dr,
formula=after~side+outcome,
FUN=c(min,mean,max,sd,skewness))
#     [1.f] Plot the DELTA debate statistics
p <- ggplot(data=m.dr,
aes(x=side,
y=delta))+
labs(title = "I2US:  Polling Delta", x = "By audience votes per side", y = "Difference (%after - %before)")+
geom_boxplot()+
geom_jitter(aes(colour=factor(outcome)));
print(p);
summary(m.dr$delta);
summaryBy(data=m.dr,
formula=delta~side+outcome,
FUN=c(min,mean,max,sd,skewness))
#     [1.g] Prepare the DEBATE DATA to summarize LIWC scores
liwc<-c("liwcScores.Posemo","liwcScores.Negate");
m.dd<-melt(data=dd,
id.vars=c("title","role"),
measure.vars=liwc)
m.dd[,"side"]<-m.dd[,"role"];
m.dd.agg<-aggregate(formula=value~title+side+variable,data=m.dd,FUN=mean)
m.dd.agg<-cast(m.dd.agg,title+side~variable);
m.d<-merge(x=m.dr,
y=m.dd.agg,
by=c("title","side"))
cor(x=c(m.d[(m.d$outcome=='win'),]$liwcScores.Posemo),
y=m.d[(m.d$outcome=='win'),]$delta);
cor(x=c(m.d[(m.d$outcome=='lose'),]$liwcScores.Posemo),
y=m.d[(m.d$outcome=='lose'),]$delta);
## Explore the debate text data:
# (2) What does LIWC have to say about the debate data?
#     [2.a] Identify the LIWC variables of interests
titles <- unique(dd$title)
liwc<-grep(pattern='^liwcScores[.](?!total).*$',
x=names(dd),
ignore.case = TRUE,
perl = TRUE,
value = TRUE);
#     [2.b] Perform the LSM (Linguistic Style Matching)
#           Based on 9 LIWC:  articles, common adverbs, personal pronouns, indefinite pronouns, prepositions, negations, conjunctions, and quantifiers
liwc<-c("liwcScores.Article","liwcScores.Adverbs","liwcScores.Posemo","liwcScores.Ppron","liwcScores.Ipron","liwcScores.Prep","liwcScores.Negate","liwcScores.Conj","liwcScores.Quant");
basic<-c("line","title","file","section","role","speaker");
totals<-c("liwcScores.total.words","liwcScores.total.sentences");
dd.liwc <- dd[,names(dd) %in% c(basic,liwc,totals)];
## Create the LIWC percentages
#   The function eLIWC creates a rolling average LIWC score, this is so that
#   when calculating the LSM (Linguistic Style Matching), each exchange will
#   represent the average LSM at that point (based on all prior exchanges).
#   Most papers aggregate at the experience or document level, the rolling
#   approach is to eventually see if there's a way to predict an outcome
#   based on early exchanges.
## DDPLY (part of the PLYR package) is used to create by group LIWC calculations.
#   Here LIWC scores are generated by title.
eLIWC <- function(x){
print(x[1,"title"]);
for (i in 1:nrow(x)) {
for (t in liwc){
#print(paste('---',t,sep=""));
#ROLLING AVERAGE x[i,paste("perc.",t,sep="")] <-(sum(x[seq(from=1,to=i),t])/sum(x[seq(from=1,to=i),"liwcScores.total.words"]))*100;
x[,paste("perc.",t,sep="")] <-(x[,t]/x[,"liwcScores.total.words"])*100;
}
}
return(x);
};
dd.liwc<-ddply(dd.liwc,.(title,section,speaker), eLIWC);
dd.liwc<-dd.liwc[with(dd.liwc, order(title, line)), ]
## The ePairing function identifies the next speaker and their role in the debate.
#   Additionally, the speakingOrder variable is created so that summaries (i.e., LSM)
#   can be made based on who is speaking to whom.
## Here DDPLY aggregates the results by title and by section in order to isolate the
#   debate portion of the show.
ePairing <- function(x){
## Return the prior value for each speaker
ids<-c("speaker","role");
for (t in ids){
x[,paste("p.",t,sep="")] <- c(rep(NA,1),head(as.character(x[,t]),-1));
summary(x[3,c(t,paste("p.",t,sep=""))]);
}
x[,"speakingOrder"]<-paste(x$role,x$p.role,sep="<-");
return(x);
}
dd.lsm<-ddply(dd.liwc,.(title,section), ePairing);
## eLSM calculates the LSM
eLSM <- function(x){
for (t in c(paste("perc.",liwc,sep=""))){
x[,paste("p.",t,sep="")] <- c(rep(0.0001,1),head(as.numeric(x[,t]),-1));
# (Ireland, 2010)  Add + 0.0001 to the denominator to prevent empty sets
# http://pss.sagepub.com.proxy.library.cornell.edu/content/22/1/39.full.pdf
x[,paste("lsm.",t,sep="")] <- as.numeric(1-(abs(x[,paste("p.",t,sep="")] - x[,t])/(x[,paste("p.",t,sep="")] + x[,t] + 0.0001)));
#print(summary(dd.liwc[,c(t,paste("p.",t,sep=""),paste("lsm.",t,sep=""))]));
}
for (i in 1:nrow(x)){
x[i,"lsm"]<-sum(x[i,c(paste("lsm.",paste("perc.",liwc,sep=""),sep=""))])/length(liwc);
}
return(x);
}
dd.lsm<-ddply(dd.lsm,.(title,section,speakingOrder), eLSM);
eNumber <- function(x){
for (i in 1:nrow(x)){
x[i,"bin"]<-floor(i/5);
x[i,"line.bin"]<-i;
}
return(x);
}
dd.lsm<-ddply(dd.lsm,.(title,section,role), eNumber);
## Create several GGPLOTs to depict the LSM by utterance during the debate section
for (t in titles){
print(t);
#tsub <- subset(dd.lsm,(title==t)&((speakingOrder=="against<-for")|(speakingOrder=="for<-against")|(speakingOrder=="for<-moderator")|(speakingOrder=="against<-moderator"))&((section=="R3")));
tsub <- subset(dd.lsm,(title==t)&((speakingOrder=="against<-for")|(speakingOrder=="for<-against"))&((section=="R3")));
lSect <- aggregate(.~section,
data=tsub[,c("line","section")],
FUN=min)
p <- ggplot(data=tsub,
aes(x=line,
colour=factor(role),
y=lsm),
group=factor(bin))+
labs(title = paste("I2US Debate: ",t,sep=""), x = "By utterance (within Debate Section)", y = "Linguistic Style Matching (LSM)")+
geom_point()+
geom_line()+
stat_smooth(method = "lm");
ggsave(plot=p, filename=paste("images/",t,".png",sep=""));
print(p);
}
#####
detach(i2us);
save(i2us, file = "i2us.RData");
print("--end--");
cor(x=c(m.d[(m.d$outcome=='win'),]$liwcScores.Posemo),
y=m.d[(m.d$outcome=='win'),]$delta);
cor(x=c(m.d[(m.d$outcome=='lose'),]$liwcScores.Posemo),
y=m.d[(m.d$outcome=='lose'),]$delta);
